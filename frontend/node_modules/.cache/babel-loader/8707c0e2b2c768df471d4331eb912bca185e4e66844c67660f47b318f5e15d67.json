{"ast":null,"code":"/**\n * Utility for playing sound effects in the application with settings control\n */\n\n// Default settings\nlet soundEnabled = true;\nlet volume = 0.5; // 0 to 1\n\n// Track if sounds are available\nlet startSoundAvailable = true;\nlet stopSoundAvailable = true;\n\n// Create audio elements with proper paths relative to public directory\nconst startListeningSound = new Audio('./sounds/agent-start-listening.mp3');\nconst stopListeningSound = new Audio('./sounds/agent-stop-listening.mp3');\n\n// Apply initial settings\nstartListeningSound.volume = volume;\nstopListeningSound.volume = volume;\n\n// Check if sounds are available\nstartListeningSound.addEventListener('error', () => {\n  console.warn('Start listening sound file not found or unsupported format');\n  startSoundAvailable = false;\n});\nstopListeningSound.addEventListener('error', () => {\n  console.warn('Stop listening sound file not found or unsupported format');\n  stopSoundAvailable = false;\n});\n\n// Preload the sounds\nstartListeningSound.load();\nstopListeningSound.load();\n\n/**\n * Plays the sound when the agent starts listening\n */\nexport const playStartListeningSound = () => {\n  if (soundEnabled && startSoundAvailable) {\n    try {\n      startListeningSound.currentTime = 0;\n      const playPromise = startListeningSound.play();\n      if (playPromise !== undefined) {\n        playPromise.catch(error => {\n          console.error('Error playing start listening sound:', error);\n          // If autoplay policy is the issue, we can handle it specially\n          if (error.name === 'NotAllowedError') {\n            console.warn('Audio playback was prevented by browser autoplay policy');\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error in playStartListeningSound:', error);\n    }\n  }\n};\n\n/**\n * Plays the sound when the agent stops listening\n */\nexport const playStopListeningSound = () => {\n  if (soundEnabled && stopSoundAvailable) {\n    try {\n      stopListeningSound.currentTime = 0;\n      const playPromise = stopListeningSound.play();\n      if (playPromise !== undefined) {\n        playPromise.catch(error => {\n          console.error('Error playing stop listening sound:', error);\n          if (error.name === 'NotAllowedError') {\n            console.warn('Audio playback was prevented by browser autoplay policy');\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error in playStopListeningSound:', error);\n    }\n  }\n};\n\n/**\n * Update sound settings\n */\nexport const updateSoundSettings = (enabled, newVolume) => {\n  soundEnabled = enabled;\n  if (newVolume !== undefined) {\n    volume = Math.min(1, Math.max(0, newVolume)); // Ensure volume is between 0 and 1\n    startListeningSound.volume = volume;\n    stopListeningSound.volume = volume;\n  }\n};\n\n/**\n * Check if the sound files are available\n * @returns {boolean} true if at least one sound file is available\n */\nexport const areSoundsAvailable = () => {\n  return startSoundAvailable || stopSoundAvailable;\n};","map":{"version":3,"names":["soundEnabled","volume","startSoundAvailable","stopSoundAvailable","startListeningSound","Audio","stopListeningSound","addEventListener","console","warn","load","playStartListeningSound","currentTime","playPromise","play","undefined","catch","error","name","playStopListeningSound","updateSoundSettings","enabled","newVolume","Math","min","max","areSoundsAvailable"],"sources":["/Users/komasz/Documents/GitHub/ai-voice/frontend/src/utils/soundEffects.ts"],"sourcesContent":["/**\n * Utility for playing sound effects in the application with settings control\n */\n\n// Default settings\nlet soundEnabled = true;\nlet volume = 0.5; // 0 to 1\n\n// Track if sounds are available\nlet startSoundAvailable = true;\nlet stopSoundAvailable = true;\n\n// Create audio elements with proper paths relative to public directory\nconst startListeningSound = new Audio('./sounds/agent-start-listening.mp3');\nconst stopListeningSound = new Audio('./sounds/agent-stop-listening.mp3');\n\n// Apply initial settings\nstartListeningSound.volume = volume;\nstopListeningSound.volume = volume;\n\n// Check if sounds are available\nstartListeningSound.addEventListener('error', () => {\n  console.warn('Start listening sound file not found or unsupported format');\n  startSoundAvailable = false;\n});\n\nstopListeningSound.addEventListener('error', () => {\n  console.warn('Stop listening sound file not found or unsupported format');\n  stopSoundAvailable = false;\n});\n\n// Preload the sounds\nstartListeningSound.load();\nstopListeningSound.load();\n\n/**\n * Plays the sound when the agent starts listening\n */\nexport const playStartListeningSound = () => {\n  if (soundEnabled && startSoundAvailable) {\n    try {\n      startListeningSound.currentTime = 0;\n      const playPromise = startListeningSound.play();\n      \n      if (playPromise !== undefined) {\n        playPromise.catch(error => {\n          console.error('Error playing start listening sound:', error);\n          // If autoplay policy is the issue, we can handle it specially\n          if (error.name === 'NotAllowedError') {\n            console.warn('Audio playback was prevented by browser autoplay policy');\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error in playStartListeningSound:', error);\n    }\n  }\n};\n\n/**\n * Plays the sound when the agent stops listening\n */\nexport const playStopListeningSound = () => {\n  if (soundEnabled && stopSoundAvailable) {\n    try {\n      stopListeningSound.currentTime = 0;\n      const playPromise = stopListeningSound.play();\n      \n      if (playPromise !== undefined) {\n        playPromise.catch(error => {\n          console.error('Error playing stop listening sound:', error);\n          if (error.name === 'NotAllowedError') {\n            console.warn('Audio playback was prevented by browser autoplay policy');\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error in playStopListeningSound:', error);\n    }\n  }\n};\n\n/**\n * Update sound settings\n */\nexport const updateSoundSettings = (enabled: boolean, newVolume?: number) => {\n  soundEnabled = enabled;\n  \n  if (newVolume !== undefined) {\n    volume = Math.min(1, Math.max(0, newVolume)); // Ensure volume is between 0 and 1\n    startListeningSound.volume = volume;\n    stopListeningSound.volume = volume;\n  }\n};\n\n/**\n * Check if the sound files are available\n * @returns {boolean} true if at least one sound file is available\n */\nexport const areSoundsAvailable = () => {\n  return startSoundAvailable || stopSoundAvailable;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}