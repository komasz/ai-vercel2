{"ast":null,"code":"var _jsxFileName = \"/Users/komasz/Documents/GitHub/ai-voice/frontend/src/components/AudioChat/AudioChat.tsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { socket } from '../../services/socket';\nimport { makeAutoObservable } from 'mobx';\nimport { AudioChatIconButton, AudioChatRuningIcon, StopAudioIconButton, ChatRuningWrapper } from './AudioChat.styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass AudioQueueManager {\n  // 2 seconds\n\n  constructor() {\n    this.audioQueue = [];\n    this.isPlaying = false;\n    this.pitchFactor = 0.5;\n    this.lastAudioTimestamp = 0;\n    this.consecutiveEmptyAudioCount = 0;\n    this.silenceDurationThreshold = 2000;\n    makeAutoObservable(this);\n  }\n  setPitchFactor(factor) {\n    this.pitchFactor = factor;\n  }\n  addAudioToQueue(audioData) {\n    // Reset silence detection on new audio\n    this.consecutiveEmptyAudioCount = 0;\n    this.lastAudioTimestamp = Date.now();\n    this.audioQueue.push(audioData);\n    this.playNext();\n  }\n  async playNext() {\n    if (this.isPlaying || this.audioQueue.length === 0) return;\n    this.isPlaying = true;\n    const audioData = this.audioQueue.shift();\n    await this.playAudio(audioData);\n    this.isPlaying = false;\n    this.playNext();\n\n    // Track last audio playback time\n    this.lastAudioTimestamp = Date.now();\n  }\n  playAudio(audioBuffer) {\n    return new Promise(resolve => {\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const binaryString = atob(audioBuffer);\n      const len = binaryString.length;\n      const int16Array = new Int16Array(len / 2);\n      for (let i = 0; i < len; i += 2) {\n        int16Array[i / 2] = binaryString.charCodeAt(i) | binaryString.charCodeAt(i + 1) << 8;\n      }\n      const float32Array = new Float32Array(int16Array.length);\n      for (let i = 0; i < int16Array.length; i++) {\n        float32Array[i] = int16Array[i] / 0x7fff;\n      }\n      const audioBufferObj = audioContext.createBuffer(1, float32Array.length, audioContext.sampleRate);\n      audioBufferObj.copyToChannel(float32Array, 0);\n      const source = audioContext.createBufferSource();\n      source.buffer = audioBufferObj;\n      source.playbackRate.value = this.pitchFactor;\n      source.connect(audioContext.destination);\n      source.onended = () => resolve();\n      source.start(0);\n    });\n  }\n  stopAudio() {\n    this.isPlaying = false;\n    this.audioQueue = [];\n    this.consecutiveEmptyAudioCount = 0;\n  }\n  checkSpeechCompletion() {\n    // If we haven't received audio for a while, consider the speech complete\n    if (this.lastAudioTimestamp && Date.now() - this.lastAudioTimestamp > this.silenceDurationThreshold) {\n      if (this.audioQueue.length === 0 && !this.isPlaying) {\n        this.consecutiveEmptyAudioCount++;\n\n        // If we've had multiple checks without audio, reset everything\n        if (this.consecutiveEmptyAudioCount > 3) {\n          console.log('Speech appears stuck or completed, resetting audio state');\n          this.stopAudio();\n          socket.emit('resetConversation'); // We'll implement this on the backend\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\nlet audioContext = null;\nlet mediaStream = null;\nconst AudioChat = ({\n  voiceEnabled,\n  onVoiceStart,\n  onVoiceStop\n}) => {\n  _s();\n  const audioQueueManager = useMemo(() => new AudioQueueManager(), []);\n  const completionCheckerRef = useRef(null);\n  const handleStartVoiceChat = useCallback(async () => {\n    onVoiceStart();\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          sampleRate: 24000,\n          channelCount: 1,\n          echoCancellation: true\n        }\n      });\n      mediaStream = stream;\n      audioContext = new AudioContext({\n        sampleRate: 24000\n      });\n      const source = audioContext.createMediaStreamSource(stream);\n      const processor = audioContext.createScriptProcessor(4096, 1, 1);\n      source.connect(processor);\n      processor.connect(audioContext.destination);\n      processor.onaudioprocess = event => {\n        const inputBuffer = event.inputBuffer;\n        const inputData = inputBuffer.getChannelData(0);\n        const int16Array = new Int16Array(inputData.length);\n        for (let i = 0; i < inputData.length; i++) {\n          int16Array[i] = Math.min(1, Math.max(-1, inputData[i])) * 0x7fff;\n        }\n        const base64String = btoa(String.fromCharCode(...new Uint8Array(int16Array.buffer)));\n        socket.emit('audioInput', base64String);\n      };\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n    }\n  }, [onVoiceStart]);\n  const handleStopVoiceChat = useCallback(() => {\n    onVoiceStop();\n    if (audioContext) {\n      audioContext.close();\n      audioContext = null;\n    }\n    if (mediaStream) {\n      mediaStream.getTracks().forEach(track => track.stop());\n      mediaStream = null;\n    }\n  }, [onVoiceStop]);\n  useEffect(() => {\n    function handleAudioResponse(data) {\n      if (data.delta) {\n        audioQueueManager.addAudioToQueue(data.delta);\n      }\n    }\n    if (voiceEnabled) {\n      socket.on('audioResponse', handleAudioResponse);\n\n      // Start checking for speech completion when voice is enabled\n      completionCheckerRef.current = window.setInterval(() => {\n        audioQueueManager.checkSpeechCompletion();\n      }, 1000);\n    }\n    return () => {\n      socket.off('audioResponse', handleAudioResponse);\n      if (completionCheckerRef.current) {\n        clearInterval(completionCheckerRef.current);\n        completionCheckerRef.current = null;\n      }\n    };\n  }, [voiceEnabled, audioQueueManager]);\n  useEffect(() => {\n    function handleSpeechStarted() {\n      audioQueueManager.stopAudio();\n    }\n    socket.on('speechStarted', handleSpeechStarted);\n    return () => {\n      socket.off('speechStarted', handleSpeechStarted);\n    };\n  }, [audioQueueManager]);\n  if (!voiceEnabled) {\n    return /*#__PURE__*/_jsxDEV(AudioChatIconButton, {\n      onClick: handleStartVoiceChat,\n      src: \"/audio-chat-icon.svg\",\n      alt: \"Audio Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(ChatRuningWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(StopAudioIconButton, {\n        onClick: handleStopVoiceChat,\n        src: \"/arrow-back-icon.svg\",\n        alt: \"Stop Audio Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AudioChatRuningIcon, {\n        onClick: handleStopVoiceChat,\n        src: \"/audio-chat-icon-run.svg\",\n        alt: \"Chat runing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this);\n  }\n};\n_s(AudioChat, \"VBkMG8Oc/riHPY7a2iLmx4Qnphg=\");\n_c = AudioChat;\nexport default AudioChat;\nvar _c;\n$RefreshReg$(_c, \"AudioChat\");","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useRef","socket","makeAutoObservable","AudioChatIconButton","AudioChatRuningIcon","StopAudioIconButton","ChatRuningWrapper","jsxDEV","_jsxDEV","AudioQueueManager","constructor","audioQueue","isPlaying","pitchFactor","lastAudioTimestamp","consecutiveEmptyAudioCount","silenceDurationThreshold","setPitchFactor","factor","addAudioToQueue","audioData","Date","now","push","playNext","length","shift","playAudio","audioBuffer","Promise","resolve","audioContext","window","AudioContext","webkitAudioContext","binaryString","atob","len","int16Array","Int16Array","i","charCodeAt","float32Array","Float32Array","audioBufferObj","createBuffer","sampleRate","copyToChannel","source","createBufferSource","buffer","playbackRate","value","connect","destination","onended","start","stopAudio","checkSpeechCompletion","console","log","emit","mediaStream","AudioChat","voiceEnabled","onVoiceStart","onVoiceStop","_s","audioQueueManager","completionCheckerRef","handleStartVoiceChat","stream","navigator","mediaDevices","getUserMedia","audio","channelCount","echoCancellation","createMediaStreamSource","processor","createScriptProcessor","onaudioprocess","event","inputBuffer","inputData","getChannelData","Math","min","max","base64String","btoa","String","fromCharCode","Uint8Array","error","handleStopVoiceChat","close","getTracks","forEach","track","stop","handleAudioResponse","data","delta","on","current","setInterval","off","clearInterval","handleSpeechStarted","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["/Users/komasz/Documents/GitHub/ai-voice/frontend/src/components/AudioChat/AudioChat.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { socket } from '../../services/socket';\nimport { makeAutoObservable } from 'mobx';\nimport {\n  AudioChatIconButton,\n  AudioChatRuningIcon,\n  StopAudioIconButton,\n  ChatRuningWrapper,\n} from './AudioChat.styled';\n\nclass AudioQueueManager {\n  audioQueue: string[] = [];\n  isPlaying = false;\n  pitchFactor = 0.5;\n  lastAudioTimestamp = 0;\n  consecutiveEmptyAudioCount = 0;\n  silenceDurationThreshold = 2000; // 2 seconds\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  setPitchFactor(factor: number) {\n    this.pitchFactor = factor;\n  }\n\n  addAudioToQueue(audioData: string) {\n    // Reset silence detection on new audio\n    this.consecutiveEmptyAudioCount = 0;\n    this.lastAudioTimestamp = Date.now();\n\n    this.audioQueue.push(audioData);\n    this.playNext();\n  }\n\n  async playNext() {\n    if (this.isPlaying || this.audioQueue.length === 0) return;\n\n    this.isPlaying = true;\n    const audioData = this.audioQueue.shift() as string;\n    await this.playAudio(audioData);\n\n    this.isPlaying = false;\n    this.playNext();\n\n    // Track last audio playback time\n    this.lastAudioTimestamp = Date.now();\n  }\n\n  playAudio(audioBuffer: string): Promise<void> {\n    return new Promise(resolve => {\n      const audioContext = new (window.AudioContext ||\n        (window as any).webkitAudioContext)();\n\n      const binaryString = atob(audioBuffer);\n      const len = binaryString.length;\n      const int16Array = new Int16Array(len / 2);\n\n      for (let i = 0; i < len; i += 2) {\n        int16Array[i / 2] =\n          binaryString.charCodeAt(i) | (binaryString.charCodeAt(i + 1) << 8);\n      }\n\n      const float32Array = new Float32Array(int16Array.length);\n      for (let i = 0; i < int16Array.length; i++) {\n        float32Array[i] = int16Array[i] / 0x7fff;\n      }\n\n      const audioBufferObj = audioContext.createBuffer(\n        1,\n        float32Array.length,\n        audioContext.sampleRate,\n      );\n\n      audioBufferObj.copyToChannel(float32Array, 0);\n\n      const source = audioContext.createBufferSource();\n      source.buffer = audioBufferObj;\n      source.playbackRate.value = this.pitchFactor;\n\n      source.connect(audioContext.destination);\n      source.onended = () => resolve();\n      source.start(0);\n    });\n  }\n\n  stopAudio() {\n    this.isPlaying = false;\n    this.audioQueue = [];\n    this.consecutiveEmptyAudioCount = 0;\n  }\n\n  checkSpeechCompletion() {\n    // If we haven't received audio for a while, consider the speech complete\n    if (this.lastAudioTimestamp && Date.now() - this.lastAudioTimestamp > this.silenceDurationThreshold) {\n      if (this.audioQueue.length === 0 && !this.isPlaying) {\n        this.consecutiveEmptyAudioCount++;\n\n        // If we've had multiple checks without audio, reset everything\n        if (this.consecutiveEmptyAudioCount > 3) {\n          console.log('Speech appears stuck or completed, resetting audio state');\n          this.stopAudio();\n          socket.emit('resetConversation'); // We'll implement this on the backend\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\ninterface AudioChatProps {\n  voiceEnabled: boolean;\n  onVoiceStart: () => void;\n  onVoiceStop: () => void;\n}\n\nlet audioContext: AudioContext | null = null;\nlet mediaStream: MediaStream | null = null;\n\nconst AudioChat: React.FC<AudioChatProps> = ({\n  voiceEnabled,\n  onVoiceStart,\n  onVoiceStop,\n}) => {\n  const audioQueueManager = useMemo(() => new AudioQueueManager(), []);\n  const completionCheckerRef = useRef<number | null>(null);\n\n  const handleStartVoiceChat = useCallback(async () => {\n    onVoiceStart();\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          sampleRate: 24000,\n          channelCount: 1,\n          echoCancellation: true,\n        },\n      });\n      mediaStream = stream;\n\n      audioContext = new AudioContext({ sampleRate: 24000 });\n      const source = audioContext.createMediaStreamSource(stream);\n      const processor = audioContext.createScriptProcessor(4096, 1, 1);\n\n      source.connect(processor);\n      processor.connect(audioContext.destination);\n\n      processor.onaudioprocess = event => {\n        const inputBuffer = event.inputBuffer;\n        const inputData = inputBuffer.getChannelData(0);\n\n        const int16Array = new Int16Array(inputData.length);\n        for (let i = 0; i < inputData.length; i++) {\n          int16Array[i] = Math.min(1, Math.max(-1, inputData[i])) * 0x7fff;\n        }\n\n        const base64String = btoa(\n          String.fromCharCode(...new Uint8Array(int16Array.buffer)),\n        );\n        socket.emit('audioInput', base64String);\n      };\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n    }\n  }, [onVoiceStart]);\n\n  const handleStopVoiceChat = useCallback(() => {\n    onVoiceStop();\n    if (audioContext) {\n      audioContext.close();\n      audioContext = null;\n    }\n    if (mediaStream) {\n      mediaStream.getTracks().forEach(track => track.stop());\n      mediaStream = null;\n    }\n  }, [onVoiceStop]);\n\n  useEffect(() => {\n    function handleAudioResponse(data: any) {\n      if (data.delta) {\n        audioQueueManager.addAudioToQueue(data.delta);\n      }\n    }\n\n    if (voiceEnabled) {\n      socket.on('audioResponse', handleAudioResponse);\n\n      // Start checking for speech completion when voice is enabled\n      completionCheckerRef.current = window.setInterval(() => {\n        audioQueueManager.checkSpeechCompletion();\n      }, 1000);\n    }\n\n    return () => {\n      socket.off('audioResponse', handleAudioResponse);\n      if (completionCheckerRef.current) {\n        clearInterval(completionCheckerRef.current);\n        completionCheckerRef.current = null;\n      }\n    };\n  }, [voiceEnabled, audioQueueManager]);\n\n  useEffect(() => {\n    function handleSpeechStarted() {\n      audioQueueManager.stopAudio();\n    }\n    socket.on('speechStarted', handleSpeechStarted);\n    return () => {\n      socket.off('speechStarted', handleSpeechStarted);\n    };\n  }, [audioQueueManager]);\n\n  if (!voiceEnabled) {\n    return (\n      <AudioChatIconButton\n        onClick={handleStartVoiceChat}\n        src=\"/audio-chat-icon.svg\"\n        alt=\"Audio Chat\"\n      />\n    );\n  } else {\n    return (\n      <ChatRuningWrapper>\n        <StopAudioIconButton\n          onClick={handleStopVoiceChat}\n          src=\"/arrow-back-icon.svg\"\n          alt=\"Stop Audio Chat\"\n        />\n        <AudioChatRuningIcon\n          onClick={handleStopVoiceChat}\n          src=\"/audio-chat-icon-run.svg\"\n          alt=\"Chat runing\"\n        />\n      </ChatRuningWrapper>\n    );\n  }\n};\n\nexport default AudioChat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}