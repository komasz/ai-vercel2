{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport { socket } from '../services/socket';\nexport const useChat = () => {\n  _s();\n  const [state, setState] = useState({\n    messages: [],\n    isLoading: false,\n    error: null\n  });\n  const processedTextEventIds = useRef(new Set());\n  const processedAudioEventIds = useRef(new Set());\n  useEffect(() => {\n    socket.connect();\n    setState(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    socket.on('connect', () => {\n      setState(prev => ({\n        ...prev,\n        isLoading: false\n      }));\n    });\n    socket.on('audioInputTranscript', data => {\n      if (data.event_id) {\n        if (processedAudioEventIds.current.has(data.event_id)) {\n          return;\n        }\n        processedAudioEventIds.current.add(data.event_id);\n      }\n      const userMessage = {\n        id: Date.now().toString(),\n        content: data.transcript,\n        role: 'user',\n        timestamp: new Date()\n      };\n      setState(prev => ({\n        ...prev,\n        messages: [...prev.messages, userMessage]\n      }));\n    });\n    socket.on('textTranscript', data => {\n      var _data$part;\n      if (processedTextEventIds.current.has(data.event_id)) {\n        return;\n      }\n      processedTextEventIds.current.add(data.event_id);\n      const botMessage = {\n        id: (Date.now() + 1).toString(),\n        content: {\n          message: ((_data$part = data.part) === null || _data$part === void 0 ? void 0 : _data$part.transcript) || '(no text)',\n          articles: []\n        },\n        role: 'assistant',\n        timestamp: new Date()\n      };\n      setState(prev => ({\n        ...prev,\n        messages: [...prev.messages, botMessage],\n        isLoading: false\n      }));\n    });\n    socket.on('connect_error', err => {\n      console.error('Socket connect_error:', err);\n      setState(prev => ({\n        ...prev,\n        error: 'Unable to connect to Socket.io',\n        isLoading: false\n      }));\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n  const sendMessage = text => {\n    if (!socket.connected) {\n      console.error('Socket is not connected.');\n      return;\n    }\n    socket.emit('textInput', text);\n    const userMessage = {\n      id: Date.now().toString(),\n      content: text,\n      role: 'user',\n      timestamp: new Date()\n    };\n    setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, userMessage],\n      isLoading: true\n    }));\n  };\n  const handleRecommendMessage = message => {\n    const assistantMessage = {\n      id: Date.now().toString(),\n      content: {\n        message,\n        articles: []\n      },\n      role: 'assistant',\n      timestamp: new Date()\n    };\n    setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, assistantMessage],\n      isLoading: false\n    }));\n  };\n  return {\n    messages: state.messages,\n    isLoading: state.isLoading,\n    error: state.error,\n    sendMessage,\n    handleRecommendMessage\n  };\n};\n_s(useChat, \"Unj0Cf2yc/7IKVSt2VQoOQR4csg=\");","map":{"version":3,"names":["useState","useEffect","useRef","socket","useChat","_s","state","setState","messages","isLoading","error","processedTextEventIds","Set","processedAudioEventIds","connect","prev","on","data","event_id","current","has","add","userMessage","id","Date","now","toString","content","transcript","role","timestamp","_data$part","botMessage","message","part","articles","err","console","disconnect","sendMessage","text","connected","emit","handleRecommendMessage","assistantMessage"],"sources":["/Users/komasz/Documents/GitHub/ai-voice/frontend/src/hooks/useChat.ts"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { socket } from '../services/socket';\nimport { BotMessage, ChatState, UserMessage } from '@/types/chat';\n\nexport const useChat = () => {\n  const [state, setState] = useState<ChatState>({\n    messages: [],\n    isLoading: false,\n    error: null,\n  });\n\n  const processedTextEventIds = useRef<Set<string>>(new Set());\n  const processedAudioEventIds = useRef<Set<string>>(new Set());\n\n  useEffect(() => {\n    socket.connect();\n    setState(prev => ({ ...prev, isLoading: true }));\n\n    socket.on('connect', () => {\n      setState(prev => ({ ...prev, isLoading: false }));\n    });\n\n    socket.on('audioInputTranscript', (data: any) => {\n      if (data.event_id) {\n        if (processedAudioEventIds.current.has(data.event_id)) {\n          return;\n        }\n        processedAudioEventIds.current.add(data.event_id);\n      }\n\n      const userMessage: UserMessage = {\n        id: Date.now().toString(),\n        content: data.transcript,\n        role: 'user',\n        timestamp: new Date(),\n      };\n\n      setState(prev => ({\n        ...prev,\n        messages: [...prev.messages, userMessage],\n      }));\n    });\n\n    socket.on('textTranscript', (data: any) => {\n      if (processedTextEventIds.current.has(data.event_id)) {\n        return;\n      }\n      processedTextEventIds.current.add(data.event_id);\n\n      const botMessage: BotMessage = {\n        id: (Date.now() + 1).toString(),\n        content: {\n          message: data.part?.transcript || '(no text)',\n          articles: [],\n        },\n        role: 'assistant',\n        timestamp: new Date(),\n      };\n\n      setState(prev => ({\n        ...prev,\n        messages: [...prev.messages, botMessage],\n        isLoading: false,\n      }));\n    });\n\n    socket.on('connect_error', err => {\n      console.error('Socket connect_error:', err);\n      setState(prev => ({\n        ...prev,\n        error: 'Unable to connect to Socket.io',\n        isLoading: false,\n      }));\n    });\n\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  const sendMessage = (text: string) => {\n    if (!socket.connected) {\n      console.error('Socket is not connected.');\n      return;\n    }\n\n    socket.emit('textInput', text);\n\n    const userMessage: UserMessage = {\n      id: Date.now().toString(),\n      content: text,\n      role: 'user',\n      timestamp: new Date(),\n    };\n\n    setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, userMessage],\n      isLoading: true,\n    }));\n  };\n\n  const handleRecommendMessage = (message: string) => {\n    const assistantMessage: BotMessage = {\n      id: Date.now().toString(),\n      content: { message, articles: [] },\n      role: 'assistant',\n      timestamp: new Date(),\n    };\n\n    setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, assistantMessage],\n      isLoading: false,\n    }));\n  };\n\n  return {\n    messages: state.messages,\n    isLoading: state.isLoading,\n    error: state.error,\n    sendMessage,\n    handleRecommendMessage,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}