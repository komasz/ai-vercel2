{"ast":null,"code":"var _jsxFileName = \"/Users/komasz/Documents/GitHub/ai-voice/frontend/src/components/AudioChat/AudioChat.tsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useMemo, useState, useRef } from 'react';\nimport { socket } from '../../services/socket';\nimport { makeAutoObservable } from 'mobx';\nimport { AudioChatIconButton, AudioChatRuningIcon, StopAudioIconButton, ChatRuningWrapper } from './AudioChat.styled';\nimport { playStartListeningSound, playStopListeningSound, areSoundsAvailable } from '../../utils/soundEffects';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass AudioQueueManager {\n  constructor() {\n    this.audioQueue = [];\n    this.isPlaying = false;\n    this.pitchFactor = 0.5;\n    this.onPlayingStateChange = null;\n    makeAutoObservable(this);\n  }\n  setPitchFactor(factor) {\n    this.pitchFactor = factor;\n  }\n  setOnPlayingStateChange(callback) {\n    this.onPlayingStateChange = callback;\n  }\n  addAudioToQueue(audioData) {\n    const wasEmpty = this.audioQueue.length === 0 && !this.isPlaying;\n    this.audioQueue.push(audioData);\n    if (wasEmpty) {\n      this.playNext();\n      if (this.onPlayingStateChange) {\n        this.onPlayingStateChange(true);\n      }\n    }\n  }\n  async playNext() {\n    if (this.isPlaying || this.audioQueue.length === 0) return;\n    this.isPlaying = true;\n    const audioData = this.audioQueue.shift();\n    await this.playAudio(audioData);\n    this.isPlaying = false;\n    if (this.audioQueue.length > 0) {\n      this.playNext();\n    } else if (this.onPlayingStateChange) {\n      this.onPlayingStateChange(false);\n    }\n  }\n  playAudio(audioBuffer) {\n    return new Promise(resolve => {\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const binaryString = atob(audioBuffer);\n      const len = binaryString.length;\n      const int16Array = new Int16Array(len / 2);\n      for (let i = 0; i < len; i += 2) {\n        int16Array[i / 2] = binaryString.charCodeAt(i) | binaryString.charCodeAt(i + 1) << 8;\n      }\n      const float32Array = new Float32Array(int16Array.length);\n      for (let i = 0; i < int16Array.length; i++) {\n        float32Array[i] = int16Array[i] / 0x7fff;\n      }\n      const audioBufferObj = audioContext.createBuffer(1, float32Array.length, audioContext.sampleRate);\n      audioBufferObj.copyToChannel(float32Array, 0);\n      const source = audioContext.createBufferSource();\n      source.buffer = audioBufferObj;\n      source.playbackRate.value = this.pitchFactor;\n      source.connect(audioContext.destination);\n      source.onended = () => resolve();\n      source.start(0);\n    });\n  }\n  stopAudio() {\n    const wasPlaying = this.isPlaying || this.audioQueue.length > 0;\n    this.isPlaying = false;\n    this.audioQueue = [];\n    if (wasPlaying && this.onPlayingStateChange) {\n      this.onPlayingStateChange(false);\n    }\n  }\n}\nlet audioContext = null;\nlet mediaStream = null;\nlet processor = null;\nconst AudioChat = ({\n  voiceEnabled,\n  onVoiceStart,\n  onVoiceStop\n}) => {\n  _s();\n  const audioQueueManager = useMemo(() => new AudioQueueManager(), []);\n  const [aiSpeaking, setAiSpeaking] = useState(false);\n  const [micPaused, setMicPaused] = useState(false);\n  const [soundsLoaded, setSoundsLoaded] = useState(false);\n\n  // Reference for the current response ID and debounce timer\n  const currentResponseIdRef = useRef(\"\");\n  const responseTimerRef = useRef(null);\n\n  // Check if sounds are available when component mounts\n  useEffect(() => {\n    setSoundsLoaded(areSoundsAvailable());\n  }, []);\n  const pauseMicrophone = useCallback(() => {\n    if (mediaStream && !micPaused) {\n      mediaStream.getTracks().forEach(track => {\n        track.enabled = false;\n      });\n      setMicPaused(true);\n      console.log('Microphone paused');\n\n      // Play the sound when microphone is paused\n      try {\n        playStartListeningSound();\n      } catch (error) {\n        console.error('Failed to play start listening sound:', error);\n      }\n    }\n  }, [micPaused]);\n  const resumeMicrophone = useCallback(() => {\n    if (mediaStream && micPaused) {\n      mediaStream.getTracks().forEach(track => {\n        track.enabled = true;\n      });\n      setMicPaused(false);\n      console.log('Microphone resumed');\n\n      // Play the sound when microphone is resumed\n      try {\n        playStopListeningSound();\n      } catch (error) {\n        console.error('Failed to play stop listening sound:', error);\n      }\n    }\n  }, [micPaused]);\n\n  // Modified: Separate AI speaking state from microphone pausing\n  useEffect(() => {\n    audioQueueManager.setOnPlayingStateChange(isPlaying => {\n      setAiSpeaking(isPlaying);\n      // Temporarily pause microphone when AI starts speaking\n      if (isPlaying) {\n        pauseMicrophone();\n      }\n    });\n  }, [audioQueueManager, pauseMicrophone]);\n  const handleStartVoiceChat = useCallback(async () => {\n    try {\n      playStartListeningSound();\n    } catch (error) {\n      console.error('Failed to play start sound:', error);\n    }\n    onVoiceStart();\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          sampleRate: 24000,\n          channelCount: 1,\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }\n      });\n      mediaStream = stream;\n      audioContext = new AudioContext({\n        sampleRate: 24000\n      });\n      const source = audioContext.createMediaStreamSource(stream);\n      processor = audioContext.createScriptProcessor(4096, 1, 1);\n      source.connect(processor);\n      processor.connect(audioContext.destination);\n      processor.onaudioprocess = event => {\n        const inputBuffer = event.inputBuffer;\n        const inputData = inputBuffer.getChannelData(0);\n        const int16Array = new Int16Array(inputData.length);\n        for (let i = 0; i < inputData.length; i++) {\n          int16Array[i] = Math.min(1, Math.max(-1, inputData[i])) * 0x7fff;\n        }\n        const base64String = btoa(String.fromCharCode(...new Uint8Array(int16Array.buffer)));\n        socket.emit('audioInput', base64String);\n      };\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n    }\n  }, [onVoiceStart]);\n  const handleStopVoiceChat = useCallback(() => {\n    try {\n      playStopListeningSound();\n    } catch (error) {\n      console.error('Failed to play stop sound:', error);\n    }\n    onVoiceStop();\n    if (audioContext) {\n      audioContext.close();\n      audioContext = null;\n    }\n    if (mediaStream) {\n      mediaStream.getTracks().forEach(track => track.stop());\n      mediaStream = null;\n    }\n    if (processor) {\n      processor = null;\n    }\n    setMicPaused(false);\n  }, [onVoiceStop]);\n  useEffect(() => {\n    function handleAudioResponse(data) {\n      console.log('Wojtek AI (audio delta) - response_id:', data.response_id);\n\n      // Update current response ID\n      currentResponseIdRef.current = data.response_id;\n\n      // Clear any existing timer\n      if (responseTimerRef.current) {\n        clearTimeout(responseTimerRef.current);\n      }\n\n      // Set a new timer to detect the end of responses\n      responseTimerRef.current = setTimeout(() => {\n        console.log('Detected last audio response, resuming microphone');\n        if (micPaused) {\n          resumeMicrophone();\n        }\n      }, 500); // Wait 500ms of silence to determine it was the last audio packet\n\n      if (data.delta) {\n        audioQueueManager.addAudioToQueue(data.delta);\n      }\n    }\n    if (voiceEnabled) {\n      socket.on('audioResponse', handleAudioResponse);\n    }\n    return () => {\n      socket.off('audioResponse', handleAudioResponse);\n      // Clear timer on cleanup\n      if (responseTimerRef.current) {\n        clearTimeout(responseTimerRef.current);\n      }\n    };\n  }, [voiceEnabled, audioQueueManager, micPaused, resumeMicrophone]);\n  useEffect(() => {\n    if (voiceEnabled) {\n      try {\n        playStartListeningSound();\n      } catch (error) {\n        console.error('Failed to play start sound on voice enable:', error);\n      }\n    }\n  }, [voiceEnabled]);\n  if (!voiceEnabled) {\n    return /*#__PURE__*/_jsxDEV(AudioChatIconButton, {\n      onClick: handleStartVoiceChat,\n      src: \"/audio-chat-icon.svg\",\n      alt: \"Audio Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(ChatRuningWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(StopAudioIconButton, {\n        onClick: handleStopVoiceChat,\n        src: \"/arrow-back-icon.svg\",\n        alt: \"Stop Audio Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AudioChatRuningIcon, {\n        onClick: handleStopVoiceChat,\n        src: \"/audio-chat-icon-run.svg\",\n        alt: \"Chat runing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this);\n  }\n};\n_s(AudioChat, \"LYkUhD4w4Hq4Z4POoAzOYERHLME=\");\n_c = AudioChat;\nexport default AudioChat;\nvar _c;\n$RefreshReg$(_c, \"AudioChat\");","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useState","useRef","socket","makeAutoObservable","AudioChatIconButton","AudioChatRuningIcon","StopAudioIconButton","ChatRuningWrapper","playStartListeningSound","playStopListeningSound","areSoundsAvailable","jsxDEV","_jsxDEV","AudioQueueManager","constructor","audioQueue","isPlaying","pitchFactor","onPlayingStateChange","setPitchFactor","factor","setOnPlayingStateChange","callback","addAudioToQueue","audioData","wasEmpty","length","push","playNext","shift","playAudio","audioBuffer","Promise","resolve","audioContext","window","AudioContext","webkitAudioContext","binaryString","atob","len","int16Array","Int16Array","i","charCodeAt","float32Array","Float32Array","audioBufferObj","createBuffer","sampleRate","copyToChannel","source","createBufferSource","buffer","playbackRate","value","connect","destination","onended","start","stopAudio","wasPlaying","mediaStream","processor","AudioChat","voiceEnabled","onVoiceStart","onVoiceStop","_s","audioQueueManager","aiSpeaking","setAiSpeaking","micPaused","setMicPaused","soundsLoaded","setSoundsLoaded","currentResponseIdRef","responseTimerRef","pauseMicrophone","getTracks","forEach","track","enabled","console","log","error","resumeMicrophone","handleStartVoiceChat","stream","navigator","mediaDevices","getUserMedia","audio","channelCount","echoCancellation","noiseSuppression","autoGainControl","createMediaStreamSource","createScriptProcessor","onaudioprocess","event","inputBuffer","inputData","getChannelData","Math","min","max","base64String","btoa","String","fromCharCode","Uint8Array","emit","handleStopVoiceChat","close","stop","handleAudioResponse","data","response_id","current","clearTimeout","setTimeout","delta","on","off","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["/Users/komasz/Documents/GitHub/ai-voice/frontend/src/components/AudioChat/AudioChat.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useState, useRef } from 'react';\nimport { socket } from '../../services/socket';\nimport { makeAutoObservable } from 'mobx';\nimport {\n  AudioChatIconButton,\n  AudioChatRuningIcon,\n  StopAudioIconButton,\n  ChatRuningWrapper,\n} from './AudioChat.styled';\nimport { playStartListeningSound, playStopListeningSound, areSoundsAvailable } from '../../utils/soundEffects';\n\nclass AudioQueueManager {\n  audioQueue: string[] = [];\n  isPlaying = false;\n  pitchFactor = 0.5;\n  onPlayingStateChange: ((isPlaying: boolean) => void) | null = null;\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  setPitchFactor(factor: number) {\n    this.pitchFactor = factor;\n  }\n\n  setOnPlayingStateChange(callback: (isPlaying: boolean) => void) {\n    this.onPlayingStateChange = callback;\n  }\n\n  addAudioToQueue(audioData: string) {\n    const wasEmpty = this.audioQueue.length === 0 && !this.isPlaying;\n    this.audioQueue.push(audioData);\n\n    if (wasEmpty) {\n      this.playNext();\n      if (this.onPlayingStateChange) {\n        this.onPlayingStateChange(true);\n      }\n    }\n  }\n\n  async playNext() {\n    if (this.isPlaying || this.audioQueue.length === 0) return;\n\n    this.isPlaying = true;\n    const audioData = this.audioQueue.shift() as string;\n    await this.playAudio(audioData);\n\n    this.isPlaying = false;\n\n    if (this.audioQueue.length > 0) {\n      this.playNext();\n    } else if (this.onPlayingStateChange) {\n      this.onPlayingStateChange(false);\n    }\n  }\n\n  playAudio(audioBuffer: string): Promise<void> {\n    return new Promise(resolve => {\n      const audioContext = new (window.AudioContext ||\n        (window as any).webkitAudioContext)();\n\n      const binaryString = atob(audioBuffer);\n      const len = binaryString.length;\n      const int16Array = new Int16Array(len / 2);\n\n      for (let i = 0; i < len; i += 2) {\n        int16Array[i / 2] =\n          binaryString.charCodeAt(i) | (binaryString.charCodeAt(i + 1) << 8);\n      }\n\n      const float32Array = new Float32Array(int16Array.length);\n      for (let i = 0; i < int16Array.length; i++) {\n        float32Array[i] = int16Array[i] / 0x7fff;\n      }\n\n      const audioBufferObj = audioContext.createBuffer(\n        1,\n        float32Array.length,\n        audioContext.sampleRate,\n      );\n      audioBufferObj.copyToChannel(float32Array, 0);\n\n      const source = audioContext.createBufferSource();\n      source.buffer = audioBufferObj;\n      source.playbackRate.value = this.pitchFactor;\n\n      source.connect(audioContext.destination);\n      source.onended = () => resolve();\n      source.start(0);\n    });\n  }\n\n  stopAudio() {\n    const wasPlaying = this.isPlaying || this.audioQueue.length > 0;\n    this.isPlaying = false;\n    this.audioQueue = [];\n\n    if (wasPlaying && this.onPlayingStateChange) {\n      this.onPlayingStateChange(false);\n    }\n  }\n}\n\ninterface AudioChatProps {\n  voiceEnabled: boolean;\n  onVoiceStart: () => void;\n  onVoiceStop: () => void;\n}\n\nlet audioContext: AudioContext | null = null;\nlet mediaStream: MediaStream | null = null;\nlet processor: ScriptProcessorNode | null = null;\n\nconst AudioChat: React.FC<AudioChatProps> = ({\n  voiceEnabled,\n  onVoiceStart,\n  onVoiceStop,\n}) => {\n  const audioQueueManager = useMemo(() => new AudioQueueManager(), []);\n  const [aiSpeaking, setAiSpeaking] = useState(false);\n  const [micPaused, setMicPaused] = useState(false);\n  const [soundsLoaded, setSoundsLoaded] = useState(false);\n\n  // Reference for the current response ID and debounce timer\n  const currentResponseIdRef = useRef<string>(\"\");\n  const responseTimerRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Check if sounds are available when component mounts\n  useEffect(() => {\n    setSoundsLoaded(areSoundsAvailable());\n  }, []);\n\n  const pauseMicrophone = useCallback(() => {\n    if (mediaStream && !micPaused) {\n      mediaStream.getTracks().forEach(track => {\n        track.enabled = false;\n      });\n      setMicPaused(true);\n      console.log('Microphone paused');\n      \n      // Play the sound when microphone is paused\n      try {\n        playStartListeningSound();\n      } catch (error) {\n        console.error('Failed to play start listening sound:', error);\n      }\n    }\n  }, [micPaused]);\n\n  const resumeMicrophone = useCallback(() => {\n    if (mediaStream && micPaused) {\n      mediaStream.getTracks().forEach(track => {\n        track.enabled = true;\n      });\n      setMicPaused(false);\n      console.log('Microphone resumed');\n      \n      // Play the sound when microphone is resumed\n      try {\n        playStopListeningSound();\n      } catch (error) {\n        console.error('Failed to play stop listening sound:', error);\n      }\n    }\n  }, [micPaused]);\n\n  // Modified: Separate AI speaking state from microphone pausing\n  useEffect(() => {\n    audioQueueManager.setOnPlayingStateChange((isPlaying) => {\n      setAiSpeaking(isPlaying);\n      // Temporarily pause microphone when AI starts speaking\n      if (isPlaying) {\n        pauseMicrophone();\n      }\n    });\n  }, [audioQueueManager, pauseMicrophone]);\n\n  const handleStartVoiceChat = useCallback(async () => {\n    try {\n      playStartListeningSound();\n    } catch (error) {\n      console.error('Failed to play start sound:', error);\n    }\n\n    onVoiceStart();\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          sampleRate: 24000,\n          channelCount: 1,\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true,\n        },\n      });\n      mediaStream = stream;\n\n      audioContext = new AudioContext({ sampleRate: 24000 });\n      const source = audioContext.createMediaStreamSource(stream);\n      processor = audioContext.createScriptProcessor(4096, 1, 1);\n\n      source.connect(processor);\n      processor.connect(audioContext.destination);\n\n      processor.onaudioprocess = event => {\n        const inputBuffer = event.inputBuffer;\n        const inputData = inputBuffer.getChannelData(0);\n\n        const int16Array = new Int16Array(inputData.length);\n        for (let i = 0; i < inputData.length; i++) {\n          int16Array[i] = Math.min(1, Math.max(-1, inputData[i])) * 0x7fff;\n        }\n\n        const base64String = btoa(\n          String.fromCharCode(...new Uint8Array(int16Array.buffer)),\n        );\n        socket.emit('audioInput', base64String);\n      };\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n    }\n  }, [onVoiceStart]);\n\n  const handleStopVoiceChat = useCallback(() => {\n    try {\n      playStopListeningSound();\n    } catch (error) {\n      console.error('Failed to play stop sound:', error);\n    }\n\n    onVoiceStop();\n    if (audioContext) {\n      audioContext.close();\n      audioContext = null;\n    }\n    if (mediaStream) {\n      mediaStream.getTracks().forEach(track => track.stop());\n      mediaStream = null;\n    }\n    if (processor) {\n      processor = null;\n    }\n    setMicPaused(false);\n  }, [onVoiceStop]);\n\n  useEffect(() => {\n    function handleAudioResponse(data: any) {\n      console.log('Wojtek AI (audio delta) - response_id:', data.response_id);\n      \n      // Update current response ID\n      currentResponseIdRef.current = data.response_id;\n      \n      // Clear any existing timer\n      if (responseTimerRef.current) {\n        clearTimeout(responseTimerRef.current);\n      }\n      \n      // Set a new timer to detect the end of responses\n      responseTimerRef.current = setTimeout(() => {\n        console.log('Detected last audio response, resuming microphone');\n        if (micPaused) {\n          resumeMicrophone();\n        }\n      }, 500); // Wait 500ms of silence to determine it was the last audio packet\n      \n      if (data.delta) {\n        audioQueueManager.addAudioToQueue(data.delta);\n      }\n    }\n    \n    if (voiceEnabled) {\n      socket.on('audioResponse', handleAudioResponse);\n    }\n    \n    return () => {\n      socket.off('audioResponse', handleAudioResponse);\n      // Clear timer on cleanup\n      if (responseTimerRef.current) {\n        clearTimeout(responseTimerRef.current);\n      }\n    };\n  }, [voiceEnabled, audioQueueManager, micPaused, resumeMicrophone]);\n\n  useEffect(() => {\n    if (voiceEnabled) {\n      try {\n        playStartListeningSound();\n      } catch (error) {\n        console.error('Failed to play start sound on voice enable:', error);\n      }\n    }\n  }, [voiceEnabled]);\n\n  if (!voiceEnabled) {\n    return (\n      <AudioChatIconButton\n        onClick={handleStartVoiceChat}\n        src=\"/audio-chat-icon.svg\"\n        alt=\"Audio Chat\"\n      />\n    );\n  } else {\n    return (\n      <ChatRuningWrapper>\n        <StopAudioIconButton\n          onClick={handleStopVoiceChat}\n          src=\"/arrow-back-icon.svg\"\n          alt=\"Stop Audio Chat\"\n        />\n        <AudioChatRuningIcon\n          onClick={handleStopVoiceChat}\n          src=\"/audio-chat-icon-run.svg\"\n          alt=\"Chat runing\"\n        />\n      </ChatRuningWrapper>\n    );\n  }\n};\n\nexport default AudioChat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}